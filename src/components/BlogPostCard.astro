---
import type { CollectionEntry } from 'astro:content';
import type { ImageMetadata } from 'astro';
import { Picture } from 'astro:assets';

// 最適化付きのデフォルト画像（ImageMetadata）
import default_eyecatch from '../assets/default-eyecatch.png';

interface Props {
    post: CollectionEntry<'blog'>
}
const { post } = Astro.props as Props;

// 日付
const dateObj = new Date(post.data.date);
const updatedObj = post.data.updated ? new Date(post.data.updated) : null;

// 型ガード：ImageMetadata かどうか
const isImageMeta = (v: unknown): v is ImageMetadata =>
    !!v &&
    typeof v === "object" &&
    "src" in v &&
    "width" in v &&
    "height" in v &&
    "format" in v;

// frontmatter の eyecatch は ImageMetadata（image() 使用時）か string（旧仕様）か undefined
const rawEyecatch = post.data.eyecatch as unknown;

// 表示に使う実体を決定：ImageMetadata 優先、なければデフォルト ImageMetadata
const chosenMeta: ImageMetadata = isImageMeta(rawEyecatch) ? rawEyecatch : default_eyecatch;

// string URL（public や外部URL）が来たとき用の URL 抽出
const stringUrl = typeof rawEyecatch === "string" ? rawEyecatch : undefined;
---

<li class="border p-4 rounded hover:shadow-lg transition">
    <a href={`/blog/${post.slug}`}>
            <div class="flex flex-col md:flex-row gap-5">
            <!-- アイキャッチ画像領域 -->
            <div class="md:w-60 flex-none aspect-video">
                {
                    // 文字列URLが明示的に来ている場合のみ <img>
                    stringUrl ? (
                        <img
                            src={stringUrl}
                            alt={post.data.title}
                            loading="lazy"
                            decoding="async"
                            class="w-full h-full object-contain"
                        />
                    ) : (
                        // それ以外（ImageMetadata or 未指定）は最適化された <Picture> を使用
                        <Picture
                            src={chosenMeta}
                            alt={post.data.title}
                            widths={[320, 480, 640]}
                            sizes="(max-width: 768px) 100vw, 240px"
                            formats={["avif", "webp"]}
                            fallbackFormat="png"
                            class="w-full h-full object-contain"
                        />
                    )
                }
            </div>

            <!-- 文章エリア -->
            <div class="md:w-96 flex flex-col h-full">
                <div>
                    <h3 class="text-xl font-semibold">{post.data.title}</h3>
                </div>
                <div class="mt-auto">
                    <p class="text-sm text-gray-400">
                        投稿日: {dateObj.toLocaleDateString('ja-JP')}
                    </p>

                    {updatedObj && updatedObj.getTime() !== dateObj.getTime() && (
                        <p class="text-sm text-gray-400">
                            最終更新日: {updatedObj.toLocaleDateString('ja-JP')}
                        </p>
                    )}

                    {post.data.tags?.length > 0 && (
                        <div class="flex flex-wrap gap-2 mt-2">
                            {post.data.tags.map((tag) => (
                                <span class="bg-gray-200 text-gray-600 px-2 py-1 rounded text-xs">
                                    {tag}
                                </span>
                            ))}
                        </div>
                    )}
                </div>
            </div>
        </div>
    </a>
</li>